<!--
  Copyright (C) 2010 Orbeon, Inc.

  This program is free software; you can redistribute it and/or modify it under the terms of the
  GNU Lesser General Public License as published by the Free Software Foundation; either version
  2.1 of the License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  See the GNU Lesser General Public License for more details.

  The full text of the license is available at http://www.gnu.org/copyleft/lesser.html
  -->
<xbl:xbl xmlns:xhtml="http://www.w3.org/1999/xhtml"
         xmlns:xforms="http://www.w3.org/2002/xforms"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:ev="http://www.w3.org/2001/xml-events"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xxi="http://orbeon.org/oxf/xml/xinclude"
         xmlns:xxforms="http://orbeon.org/oxf/xml/xforms"
         xmlns:fr="http://orbeon.org/oxf/xml/form-runner"
         xmlns:fb="http://orbeon.org/oxf/xml/form-builder"
         xmlns:saxon="http://saxon.sf.net/"
         xmlns:xbl="http://www.w3.org/ns/xbl"
         xmlns:xxbl="http://orbeon.org/oxf/xml/xbl"
         xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
         xmlns:oxf="http://www.orbeon.com/oxf/processors">

    <xbl:script src="/xbl/orbeon/autocomplete/autocomplete.js"/>
    <xbl:script src="/ops/yui/datasource/datasource.js"/>
    <xbl:script src="/ops/yui/autocomplete/autocomplete.js"/>

    <xbl:binding id="fr-autocomplete" element="fr|autocomplete">

        <metadata xmlns="http://orbeon.org/oxf/xml/form-builder">
            <display-name lang="en">Autocomplete</display-name>
            <display-name lang="fr">Auto-complétion</display-name>
            <display-name lang="ru">Автозаполнение</display-name>
            <icon lang="en">
                <small-icon>/forms/orbeon/builder/images/autocomplete.png</small-icon>
                <large-icon>/forms/orbeon/builder/images/autocomplete.png</large-icon>
            </icon>
            <datatype>xforms:string</datatype>
            <fb:template>
                <fr:autocomplete id="" appearance="minimal" ref="" xmlns="" resource="">
                    <xforms:label ref=""/>
                    <xforms:hint ref=""/>
                    <xforms:help ref=""/>
                    <xforms:alert ref="$fr-resources/detail/labels/alert"/>
                    <xforms:itemset ref="">
                        <xforms:label ref=""/>
                        <xforms:value ref=""/>
                    </xforms:itemset>
                </fr:autocomplete>
            </fb:template>
            <control-details>
                <xforms:input ref="@resource">
                    <xforms:label lang="en">Resource URI</xforms:label>
                    <xforms:label lang="fr">URI de la ressource</xforms:label>
                    <xforms:hint lang="en">HTTP URI returning data used for the suggestions</xforms:hint>
                    <xforms:hint lang="fr">URI HTTP auquel réside le service</xforms:hint>
                </xforms:input>
                <xforms:input ref="xforms:itemset/@ref">
                    <xforms:label ref="$resources/dialog-actions/items/label"/>
                    <xforms:hint ref="$resources/dialog-actions/items/hint"/>
                </xforms:input>
                <xforms:input ref="xforms:itemset/xforms:label/@ref">
                    <xforms:label ref="$resources/dialog-actions/label/label"/>
                    <xforms:hint ref="$resources/dialog-actions/label/hint"/>
                </xforms:input>
                <xforms:input ref="xforms:itemset/xforms:value/@ref">
                    <xforms:label ref="$resources/dialog-actions/value/label"/>
                    <xforms:hint ref="$resources/dialog-actions/value/hint"/>
                </xforms:input>
            </control-details>
        </metadata>

        <xbl:resources>
            <xbl:style src="/ops/yui/autocomplete/assets/skins/sam/autocomplete.css"/>
            <xbl:style src="/xbl/orbeon/autocomplete/autocomplete.css"/>
            <xbl:style src="/ops/yui/button/assets/skins/sam/button.css"/>
        </xbl:resources>
        <xbl:handlers>
            <xbl:handler event="fr-set-label" phase="target">
                <!-- NOTE: This test won't be necessary anymore once this bug is fixed: http://goo.gl/n8wGO -->
                <xforms:action if="relevant = 'true'">
                    <!--  HACK: Force a refresh so the setvalue will have an effect in the case where the fr-set-value is sent on xforms-ready. -->
                    <!--  This case is tested by the unit test testSetLabelOnXFormsReady, and we'll hopefully soon be able to remove this refresh. -->
                    <xforms:refresh/>
                    <xforms:setvalue ref="textfield-value" value="event('label')"/>
                    <!-- Dispatch value change event so we dispatch the fr-search-changed to have the itemset updated right away -->
                    <xforms:dispatch name="xforms-value-changed" target="search"/>
                    <xforms:dispatch name="update-external-value" target="component-inner-group"/>
                    <xxforms:script id="out-arp">YAHOO.xbl.fr.Autocomplete.instance(this).ajaxResponseProcessed();</xxforms:script>
                </xforms:action>
            </xbl:handler>
        </xbl:handlers>
        <xbl:template xxbl:transform="oxf:unsafe-xslt">
            <xsl:transform version="2.0">
                <xsl:import href="oxf:/oxf/xslt/utils/copy-modes.xsl"/>
                <xsl:import href="oxf:/oxf/xslt/utils/xbl.xsl"/>
                <xsl:template match="/*">
                    <!-- Outer group -->
                    <xforms:group xxbl:scope="outer" class="fr-autocomplete-container" xbl:attr="model context ref bind">
                        <xbl:content includes="fr|autocomplete > xforms|label, fr|autocomplete > xforms|help, fr|autocomplete > xforms|hint, fr|autocomplete > xforms|alert"/>

                        <!-- Inner group -->
                        <xforms:group id="component-inner-group" xxbl:scope="inner">

                            <!-- - - - - - - - - - - - - - - - - - - LOCAL MODEL - - - - - - - - - - - - - - - - - - -->

                            <!-- NOTE: declared here instead of in xbl:implementation so we can use XSLT -->
                            <xforms:model id="autocomplete-model">
                                <xforms:instance id="local">
                                    <autocomplete>
                                        <relevant>false</relevant>
                                        <readonly>false</readonly>
                                        <textfield-value/>
                                        <resource/>
                                        <has-focus>false</has-focus>
                                    </autocomplete>
                                </xforms:instance>
                                <xforms:bind ref="textfield-value" readonly="../readonly = 'true'"/>
                                <!-- In resource mode, the suggestions -->
                                <xforms:instance id="suggestions-instance"><dummy/></xforms:instance>
                                <!-- What do when doing a refresh -->
                                <xforms:submission id="get-itemset" method="get" resource="{{instance('local')/resource}}" replace="instance"
                                                   instance="suggestions-instance" serialization="none">
                                    <xforms:insert ev:event="xforms-submit-error" nodeset="instance('itemset')" origin="xxforms:element('dummy')"/>
                                </xforms:submission>
                            </xforms:model>

                            <!-- - - - - - - - - - - - - - - - - - - VARIABLES - - - - - - - - - - - - - - - - - - -->

                            <!-- Variable pointing to external single-node binding -->
                            <xxforms:variable name="external-value"><xxforms:sequence select="." xxbl:scope="outer"/></xxforms:variable>
                            <xxforms:variable name="local" select="instance('local')"/>
                            <xxforms:variable name="dynamic-itemset-attribute" xbl:attr="xbl:text=dynamic-itemset"/>
                            <xxforms:variable name="resource-avt" xbl:attr="xbl:text=resource"/>
                            <xxforms:variable name="resource-avt" xbl:attr="xbl:text=resource" xxbl:scope="outer"/>
                            <!-- Mode is either: static, dynamic, resource -->
                            <xxforms:variable name="mode" select="if ($resource-avt != '') then 'resource' else if ($dynamic-itemset-attribute = 'true') then 'dynamic' else 'static'"/>
                            <xxforms:variable name="dynamic-itemset" select="$mode = ('dynamic', 'resource')"/>
                            <!-- Declare a variable fr-search-value in outer scope so it can be used in the AVT -->
                            <xxforms:variable name="fr-search-value" xxbl:scope="outer">
                                <xxforms:sequence select="$local/textfield-value" xxbl:scope="inner"/>
                            </xxforms:variable>
                            <!-- Evaluate the resource AVT -->
                            <xsl:if test="exists(@resource)">
                                <xxforms:variable name="resource" xbl:attr="xbl:text=resource" id="resource-variable">
                                    <xxforms:sequence select="xxforms:evaluate-avt($resource-avt)" xxbl:scope="outer"/>
                                </xxforms:variable>
                            </xsl:if>

                            <!-- - - - - - - - - - - - - - - - - - - FUNCTIONS - - - - - - - - - - - - - - - - - - -->

                            <!-- Look for value based on label and update external value (e.g. on tab out) -->
                            <xforms:action ev:event="update-external-value">
                                <xxforms:variable name="value" select="xxforms:element('value')"/>
                                <xforms:dispatch name="get-value-from-itemset" target="component-inner-group"><xxforms:context name="fr-value" select="$value"/></xforms:dispatch>
                                <xforms:setvalue ref="$external-value" value="$value"/>
                                <!-- If no value is found, clear the search field -->
                                <xforms:setvalue if="$value = ''" ref="$local/textfield-value"/>
                            </xforms:action>
                            <xforms:action ev:event="get-label-from-itemset">
                                <xxforms:variable name="label" select="event('fr-label')"/>
                                <xxforms:variable name="select1-items" select="xxforms:itemset('select1', 'xml')//item"/>
                                <xxforms:variable name="select1-labels" select="($select1-items/value)[position() le count($select1-items) div 2]"/>
                                <xxforms:variable name="select1-values" select="($select1-items/value)[position() gt count($select1-items) div 2]"/>
                                <xforms:setvalue ref="$label" value="$select1-labels[index-of($select1-values, $external-value)[1]]"/>
                            </xforms:action>
                            <xforms:action ev:event="get-value-from-itemset">
                                <xxforms:variable name="value" select="event('fr-value')"/>
                                <xforms:refresh/> <!-- So the itemset we get from the select1 is up-to-date -->
                                <xxforms:variable name="select1-items" select="xxforms:itemset('select1', 'xml')//item"/>
                                <xxforms:variable name="select1-labels" select="($select1-items/value)[position() le count($select1-items) div 2]"/>
                                <xxforms:variable name="select1-values" select="($select1-items/value)[position() gt count($select1-items) div 2]"/>
                                <xforms:setvalue ref="$value" value="$select1-values[index-of($select1-labels, $local/textfield-value)[1]]"/>
                            </xforms:action>

                            <!-- - - - - - - - - - - - - - - - - - - EVENTS - - - - - - - - - - - - - - - - - - -->

                            <!-- Init event -->
                            <xforms:action id="xf-en" ev:event="xforms-enabled" ev:observer="component-inner-group" ev:target="component-inner-group">
                                <xxforms:script id="init">YAHOO.xbl.fr.Autocomplete.instance(this).init();</xxforms:script>
                            </xforms:action>
                            <!-- For resource mode: when the component is initialized or when resources changes, update our internal itemset -->
                            <xsl:if test="exists(@resource)">
                                <xforms:action ev:event="xforms-value-changed" ev:observer="resource-variable">
                                    <!-- Save resource in model, as it is used as an AVT by the submission -->
                                    <xforms:setvalue ref="$local/resource" value="$resource"/>
                                    <!-- Update itemset based on resource -->
                                    <xforms:send submission="get-itemset"/>
                                </xforms:action>
                            </xsl:if>
                            <!-- Forward focus event and keep track of whether we have the focus -->
                            <xforms:action ev:event="DOMFocusIn" ev:observer="search">
                                <xforms:dispatch name="DOMFocusIn" target="fr-autocomplete"/>
                                <xforms:setvalue ref="$local/has-focus">true</xforms:setvalue>
                            </xforms:action>
                            <xforms:action ev:event="DOMFocusOut" ev:observer="search">
                                <xforms:dispatch name="DOMFocusOut" target="fr-autocomplete"/>
                                <xforms:setvalue ref="$local/has-focus">false</xforms:setvalue>
                                <xforms:dispatch name="update-external-value" target="component-inner-group"/>
                            </xforms:action>
                            <!-- Selecting a value updates the external value -->
                            <xforms:dispatch ev:event="DOMActivate" ev:observer="value-selected" name="update-external-value" target="component-inner-group"/>
                            <!-- As the user types, dispatch event to notify the external world about the value entered by the user so far -->
                            <xforms:action ev:event="xforms-value-changed" ev:observer="search" if="$dynamic-itemset">
                                <xforms:dispatch targetid="fr-autocomplete" name="fr-search-changed">
                                    <xxforms:context name="fr-search-value" select="$local/textfield-value"/>
                                </xforms:dispatch>
                            </xforms:action>
                            <xsl:if test="not(@show-suggestions-button = 'false')">
                                <!-- Clicking on the button is a way to open the suggestion list without having to type something -->
                                <xforms:action ev:event="DOMActivate" ev:observer="show-suggestions-button">
                                    <xforms:setfocus control="search"/>
                                    <xforms:dispatch target="resource-variable" name="xforms-value-changed"/>           <!-- For the resource mode, listening on resource AVT changing -->
                                    <xforms:dispatch target="search" name="xforms-value-changed"/>                      <!-- For the dynamic mode, listening on the search field content changing -->
                                    <xxforms:script id="sr">YAHOO.xbl.fr.Autocomplete.instance(this).suggestionRequested = true;</xxforms:script>
                                </xforms:action>
                            </xsl:if>
                            <!-- In static mode, when the external value changes, search for an item with that value, and set search value to the item's label -->
                            <xforms:action ev:event="xforms-enabled xforms-value-changed" ev:observer="external-value" if="not($dynamic-itemset)">
                                <xxforms:variable name="select1-current-label" select="xxforms:element('label')"/>
                                <xforms:dispatch name="get-label-from-itemset" target="component-inner-group"><xxforms:context name="fr-label" select="$select1-current-label"/></xforms:dispatch>
                                <xforms:setvalue ref="$local/textfield-value" value="$select1-current-label"/>
                            </xforms:action>
                            <!-- For the dynamic and resource mode, just reset the search field if the external value becomes empty -->
                            <xforms:setvalue ev:event="xforms-value-changed" ev:observer="external-value" if="$dynamic-itemset and $external-value = ''" ref="$local/textfield-value"/>
                            <!-- Keep track of readonlyness and relevance -->
                            <xforms:setvalue ev:observer="external-value" ev:event="xforms-readonly" ref="$local/readonly">true</xforms:setvalue>
                            <xforms:setvalue ev:observer="external-value" ev:event="xforms-readwrite" ref="$local/readonly">false</xforms:setvalue>
                            <xforms:setvalue ev:observer="external-value" ev:event="xforms-enabled" ref="$local/relevant">true</xforms:setvalue>
                            <xforms:setvalue ev:observer="external-value" ev:event="xforms-disabled" ref="$local/relevant">false</xforms:setvalue>

                            <!-- - - - - - - - - - - - - - - - - - - MARKUP - - - - - - - - - - - - - - - - - - -->

                            <!-- Markup with input for the YUI autocomplete -->
                            <xhtml:div xbl:attr="class style">
                                <xforms:input id="search" ref="$local/textfield-value" incremental="true" class="fr-autocomplete-search" xbl:attr="tabindex accesskey"/>
                                <!-- Button that opens the list of suggestions -->
                                <xsl:if test="not(@show-suggestions-button = 'false')">
                                    <!-- Make button non-relevant in static readonly mode, in order to avoid updates to
                                         the relevance of the nested trigger. Without this, if the trigger is initially
                                         readonly, it won't output markup at all. But then if it becomes non-relevant,
                                         the server will tell the client to make it non-relevant, as it has lost the
                                         knowledge that the button was static readonly. By making the whole thing
                                         non-relevant, we avoid this change of state. Of course ideally static
                                         readonly would not have this unwanted behavior. -->
                                    <xforms:group ref=".[not($local/readonly = 'true' and property('xxforms:readonly-appearance') = 'static')]">
                                        <!-- Bound to text field value so button becomes readonly when the textfield is readonly -->
                                        <fr:button ref="$local/textfield-value" class="fr-autocomplete-show-suggestions-button" id="show-suggestions-button">
                                            <xforms:label/>
                                        </fr:button>
                                    </xforms:group>
                                </xsl:if>
                                <xhtml:div class="fr-autocomplete-yui-div"/>
                            </xhtml:div>

                            <!-- Configuration -->
                            <xforms:output id="itemset" class="fr-autocomplete-dynamic-itemset" value="$dynamic-itemset" style="display: none"/>
                            <xsl:copy-of select="xxbl:parameter(., 'max-results-displayed')"/>

                            <!-- Dropdown with value shown by autocomplete -->
                            <xforms:select1 id="select1" ref="$external-value" class="fr-autocomplete-select1" appearance="minimal" xxforms:encrypt-item-values="false" style="display: none">
                                <!-- The hidden dropdown contains first all the label/label, then all the value/value -->
                                <xsl:apply-templates select="xforms:itemset | xforms:item" mode="copy-label">
                                    <xsl:with-param name="resource-instance" tunnel="yes">suggestions-instance</xsl:with-param>
                                </xsl:apply-templates>
                                <xsl:apply-templates select="xforms:itemset | xforms:item" mode="copy-value">
                                    <xsl:with-param name="resource-instance" tunnel="yes">suggestions-instance</xsl:with-param>
                                </xsl:apply-templates>
                            </xforms:select1>

                            <!-- Input with external value -->
                            <xforms:input id="external-value" ref="$external-value" class="fr-autocomplete-external-value" style="display: none"/>
                            <!-- Bridge for JS code to notify the XForms code users selected a value -->
                            <xforms:trigger id="value-selected" class="fr-autocomplete-value-selected" style="display: none"><xforms:label/></xforms:trigger>

                            <!-- Stop propagation of all UI events -->
                            <xforms:action ev:event="#all" ev:propagate="stop"/>
                        </xforms:group>
                    </xforms:group>
                </xsl:template>

                <!-- Add the xxbl:scope="outer" on the xforms:itemset and xforms:item -->
                <xsl:template match="xforms:itemset | xforms:item" mode="#all">
                    <xsl:param name="resource-instance" tunnel="yes"/>
                    <xsl:copy>
                        <!-- If we have a resource, XPath expressions are relative to suggestions-instance -->
                        <xsl:variable name="has-resource" select="exists(/*/@resource)"/>
                        <xsl:if test="$resource-instance = 'suggestions-instance'"><xsl:attribute name="xxbl:scope" select="if ($has-resource) then 'inner' else 'outer'"/></xsl:if>
                        <xsl:if test="$has-resource"><xsl:attribute name="context" select="concat('instance(''', $resource-instance, ''')')"/></xsl:if>
                        <xsl:apply-templates select="@* | node()" mode="#current"/>
                    </xsl:copy>
                </xsl:template>

                <!-- Don't do anything when the element does not correspond to the mode -->
                <xsl:template match="xforms:label" mode="copy-value"/>
                <xsl:template match="xforms:value" mode="copy-label"/>

                <!-- When the element matches the mode, generate the other one -->
                <xsl:template match="xforms:label" mode="copy-label">
                    <xsl:copy-of select="."/>
                    <xforms:value><xsl:copy-of select="@* | node()"/></xforms:value>
                </xsl:template>
                <xsl:template match="xforms:value" mode="copy-value">
                    <xsl:copy-of select="."/>
                    <xforms:label><xsl:copy-of select="@* | node()"/></xforms:label>
                </xsl:template>
            </xsl:transform>
        </xbl:template>
    </xbl:binding>

</xbl:xbl>
